# analyze_focus_data.py (Refactored)
#
# Works with the new focus_log.csv generated by unified_astro_logger.py
#
# Changes:
# - Simplified load_and_preprocess to work with the clean, new CSV format.
# - No longer needs to handle 'None' strings or complex data cleaning.
# - Predictors are now 'AmbientTempC' and dummy variables for 'Filter'.
# - Plots and analysis are updated for the new data columns.

import matplotlib
matplotlib.use('Agg') # Use non-interactive backend for saving plots
import pandas as pd
import numpy as np
from sklearn.linear_model import LinearRegression
import matplotlib.pyplot as plt
import statsmodels.api as sm
from scipy.stats import f, t
import os
from dotenv import load_dotenv

# --- Configuration ---
# Load the focus log file path from the .env file
load_dotenv()
FOCUS_LOG_FILE = os.getenv("FOCUS_LOG_FILE", "focus_log.csv") # Default if not in .env

# --- Data Loading and Preprocessing ---
def load_and_preprocess(csv_file: str) -> pd.DataFrame:
    """Loads the new focus_log.csv and prepares it for regression."""
    if not os.path.exists(csv_file):
        raise FileNotFoundError(f"Focus log file not found at: {csv_file}. Please run the logger first.")
        
    df = pd.read_csv(csv_file)
    
    # --- Data Cleaning ---
    # Drop rows where critical values are missing
    df.dropna(subset=['FocuserPosition', 'AverageHFR', 'AmbientTempC'], inplace=True)
    
    # Ensure correct numeric types
    for col in ['FocuserPosition', 'AverageHFR', 'DetectedStars', 'HFRStdDev', 'AmbientTempC', 'FocuserTempC']:
        df[col] = pd.to_numeric(df[col], errors='coerce')
    df.dropna(subset=['FocuserPosition', 'AmbientTempC'], inplace=True) # Drop again if coercion failed
    
    # --- Feature Engineering ---
    # Create dummy variables for the 'Filter' column. 'L' is often a good baseline.
    # If you don't have an 'L' filter, it will choose another alphabetically.
    df = pd.get_dummies(df, columns=['Filter'], prefix='Filter', drop_first=True, dtype=int)
    
    print("Data loaded and preprocessed successfully.")
    print(f"Shape of the dataframe: {df.shape}")
    print("Columns available for regression:", df.columns.tolist())
    
    return df

# --- Regression Analysis ---
def perform_regression(X: pd.DataFrame, y: pd.Series, model_name: str) -> dict:
    """Fits a linear model using statsmodels for detailed statistics."""
    X = sm.add_constant(X, has_constant='add') # Add intercept
    model = sm.OLS(y, X).fit()
    return {
        'model_name': model_name,
        'model': model,
        'coefficients': model.params,
        'std_err': model.bse,
        'p_values': model.pvalues,
        'r_squared': model.rsquared,
        'adj_r_squared': model.rsquared_adj,
        'se_model': np.sqrt(model.mse_resid),
        'f_statistic': model.fvalue,
        'f_pvalue': model.f_pvalue,
    }

# --- Results and Plotting ---
def print_summary(summary: dict):
    """Prints a formatted summary of the regression results."""
    print(f"\n--- Regression Summary: {summary['model_name']} ---")
    print(summary['model'].summary())
    print("--------------------------------------------------")

def plot_results(df: pd.DataFrame, model: sm.OLS, predictors: list, model_name: str):
    """Plots actual vs. predicted FocuserPosition."""
    X = df[predictors]
    X = sm.add_constant(X, has_constant='add')
    y_actual = df['FocuserPosition']
    y_pred = model.predict(X)
    
    plt.figure(figsize=(10, 8))
    plt.scatter(y_actual, y_pred, alpha=0.7)
    plt.plot([y_actual.min(), y_actual.max()], [y_actual.min(), y_actual.max()], 'r--', label='Ideal Fit (1:1 Line)')
    plt.title(f'Model Performance: {model_name}')
    plt.xlabel('Actual Focuser Position')
    plt.ylabel('Predicted Focuser Position')
    plt.grid(True)
    plt.legend()
    
    # Save the plot to a file
    output_filename = f'analysis_{model_name.lower().replace(" ", "_")}.png'
    plt.savefig(output_filename)
    plt.close()
    print(f"Saved plot to {output_filename}")

# --- Main Execution ---
def main():
    """Main function to run the focus data analysis."""
    try:
        df = load_and_preprocess(FOCUS_LOG_FILE)
    except FileNotFoundError as e:
        print(e)
        return
        
    if df.empty:
        print("The dataframe is empty after cleaning. Cannot perform analysis.")
        return

    # Define the dependent variable
    y = df['FocuserPosition']
    
    # --- Model 1: Temperature and Filter Effects ---
    # Identify all available filter dummy columns
    filter_cols = [col for col in df.columns if col.startswith('Filter_')]
    
    if not filter_cols:
        print("Warning: No filter dummy variables were created. The 'Filter' column might have only one unique value.")
        predictors1 = ['AmbientTempC']
    else:
        predictors1 = ['AmbientTempC'] + filter_cols

    # Check if all predictor columns exist in the dataframe
    if all(p in df.columns for p in predictors1):
        X1 = df[predictors1]
        summary1 = perform_regression(X1, y, "Temperature and Filter Model")
        print_summary(summary1)
        plot_results(df, summary1['model'], predictors1, "Temp_and_Filter_Model")
    else:
        print("Skipping Model 1: Not all predictor columns are available.")

    # You can add more models here to test other variables if needed.
    # For example, a model with only temperature:
    
    # --- Model 2: Temperature Only ---
    predictors2 = ['AmbientTempC']
    if 'AmbientTempC' in df.columns:
        X2 = df[predictors2]
        summary2 = perform_regression(X2, y, "Temperature-Only Model")
        print_summary(summary2)
        plot_results(df, summary2['model'], predictors2, "Temp_Only_Model")
    else:
        print("Skipping Model 2: 'AmbientTempC' column not available.")

if __name__ == "__main__":
    main()